vmax = 10 #max velocity of each robot
odd_params = {}
even_params = {}
step_test = 0
state_table = {}
running = 1
function init() {
if(id == 1){
	set_leds(255,0,0)
}
else if (id == 2){
set_leds(255,255,0)
}
else{
set_leds(0,255,0)
}
min_angle = 3.14
closest_neigh = 10
is_active = 1
perimeter_flag = 0
iter = 0
}

function step() {
#Broadcast id of the robot which can be used to control wheel velocities
neigh_reached = 0
if ((perimeter_flag == 0) and (id != 2)){
	#robot will stop transmitting data and act inactive when it reaches close to goal
	neighbors.broadcast("class", id)

neighbors.listen("class", function(vid, value, rid){
	my_dist = neighbors.get(rid).distance
	if(my_dist < 14.5){
		neigh_reached = neigh_reached + 1
	}
	if(neigh_reached >= 3){
		#log("neighbors of robot ", id, " = ", neigh_reached)
		step_test = step_test + 1
	}
	azim = neighbors.get(rid).azimuth
	elev = neighbors.get(rid).elevation
	if (math.abs(azim) < math.abs(min_angle)){
		min_angle = azim
		closest_neigh = rid
	}
})


if((math.abs(min_angle) < 0.16) and (closest_neigh == 1)){
	s = 2
}

else if((math.abs(min_angle) < 0.16) and (closest_neigh != 1)){
	s = 1
}

else if (math.abs(min_angle) > 0.16){
	s = 0
}


#target object		
#if(iter<30000)
if(running == 1){
if ((id != 1) and (id !=2) and (id < 8)){
		if((s == 2)){ #checking if the object is in +/-20 degrees in front of robot
			LH = 3.33/10.0
			RH = 10.0/10.0
			#foraging speeds
			#LH = 5.3/10
			#RH = -1.0
		set_wheels(LH*vmax, RH*vmax)						
		}

		else if(s == 1){
			LH = 3.333/10; RH = 10./10
			#foraging speeds
			#LH = 4.0/10
			#RH = 3.1/10.0
		set_wheels(LH*vmax, RH*vmax)						
		}


		else if (s == 0 ){
			LH = -10./10; RH = 3.33/10
			#foraging speeds
			LH = 7.2/10
			RH = 1.0
		set_wheels(LH*vmax, RH*vmax)						
		}
}
}
else{
if ((id != 1) and (id != 2) and (id < 8)){
		if((s == 2)){ #checking if the object is in +/-20 degrees in front of robot
			LH = -10./10.0 + iter * 0.0003
			RH = 8.3/10.0 - iter * 0.0003
			#set_wheels(LH*vmax, RH*vmax)						
			#foraging speeds
			LH = 5.3/10
			RH = -1.0
		}

		else if(s == 1){
			LH = 10./10 - iter * 0.0003
			RH = 10./10 - iter * 0.0003
			#set_wheels(LH*vmax, RH*vmax)			
			#foraging speeds
			LH = 4.0/10
			RH = 3.1/10.0
		}


		else if (s == 0 ){
			LH = 10./10 - iter * 0.0003; 
			RH = 3.7/10 - iter * 0.0003
			#foraging speeds
			LH = 7.2/10
			RH = -1.0
		}
	if((math.abs(LH*vmax) < 0.005) and (math.abs(RH*vmax) < 0.005)){
		set_wheels(0.,0.)
		perimeter_flag = 1
		#gripper_lock()
	}
	else
	{
		set_wheels(LH*vmax, RH*vmax)
	}

	if(id == 4){
	log("robot ", id, " speed = ", LH, ", ", RH)}
}


}


min_angle = 3.14
iter = iter + 1
}
}
# This function is executed when you press the reset button
function reset() {
}

# This function is executed once when you close the simulator
function destroy() {
io.fclose(result_file)
}
