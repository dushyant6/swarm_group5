vmax = 10 #max velocity of each robot
odd_params = {}
even_params = {}


function init() {
set_leds(0,255,0)
min_angle = 3.14
closest_neigh = 10
}

# This function is executed at each time step
# The main loop is controller by ARGoS
function step() {
#Broadcast id of the robot which can be used to control wheel velocities

neighbors.broadcast("class", id)
neighbors.listen("class", function(vid, value, rid){
	my_dist = neighbors.get(rid).distance
	azim = neighbors.get(rid).azimuth
	elev = neighbors.get(rid).elevation
	if(id == 4){
		log("rid = ", rid)
	}
	if (math.abs(azim) < math.abs(min_angle)){
		min_angle = azim
		closest_neigh = rid
	}
})

if((math.abs(min_angle) < 0.16) and (closest_neigh == 1)){
	s = 2
}

else if((math.abs(min_angle) < 0.16) and (closest_neigh != 1)){
	s = 1
}

else if (math.abs(min_angle) > 0.16){
	s = 0
}
if (id == 4){
x = 2
#log("robot ", id, " sees robot ", closest_neigh, " at azimuth ", min_angle)
}

		#target object		
if (id != 1){
		if((s == 2)){ #checking if the object is in +/-20 degrees in front of robot
			LH = 5.3/10.0
			RH = -1.0
			#LH = 10.0/10.0
			#RH = 10.0/10.0
			set_wheels(LH*vmax, RH*vmax)						
			#log("robot ", id, " moves towards object ")
		}

		else if(s == 1){
			LH = 4./10; RH = 3.1/10
			#LH = 10.0/10; RH = 10.0/10
			#log("robot ", id, " moves towards robot ")
			set_wheels(LH*vmax, RH*vmax)			
		}


		else if (s == 0 ){
			LH = 7.2/10; RH = 10./10
			set_wheels(LH*vmax, RH*vmax)			
			#log("robot", id, " sees nothing")
		}
}

}
# This function is executed when you press the reset button
function reset() {
}

# This function is executed once when you close the simulator
function destroy() {
io.fclose(result_file)
}
